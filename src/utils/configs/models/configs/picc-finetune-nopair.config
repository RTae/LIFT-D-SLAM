#--------------------------------------------------------------------------------------
# Be careful as we do not use sophisticated parsing
# The parser will read until the semicolon
# 
# types are defined as below
# ss: multiple strings separated with commas
# s: string
# b: boolean
# f: float
# d: int
#--------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------
# Dataset parameters
ss: dataset.trainSetList = ECCV/piccadilly/; # All the first images of oxford dataset is used for training
s: dataset.dataType = ECCV;	  # the dataset type

#--------------------------------------------------------------------------------------
# Model parameters
s: model.modelType = Combined;	  # the network type
b: model.bNormalizeInput = 1;  	  # Normalize input to have zero mean and 1 std
f: model.fScaleList = np.array([1.0]); 	     # list of scale spaces (small means larger scale)

# GHH related
f: model.max_strength = -1;	# GHH softmax strength (-1 for hard)

# Keypoints
s: model.sDetector = tilde;	   # network architecture for kp
d: model.nFilterSize = 25;	  # Let's keep the number odd
d: model.nPatchSizeKp = 48;       # patch size for kp including moving
				  # regions we use something smaller
s: model.sKpNonlinearity = None; # use nonlinearity at end
f: model.fScaleList = np.array([1.0]); 	     # list of scale spaces (small means larger scale)
f: model.bias_rnd = 0.0;		# random noise added to bias
f: model.epsilon = 1e-8;		# epsilon for tilde

# Orientation
s: model.sOrientation = cvpr16;	   # network architecture for orientation

# Descriptor
s: model.sDescriptor = descriptor_imported;	   # network architecture for desc
d: model.nDescInputSize = 64;	  # Input size to be fed to the descriptor
# s: model.descriptor_export_folder = /cvlabdata1/home/trulls-data/kpdesc/torch/export/; 
s: model.descriptor_model = new-CNN3-picc-iter-56k.h5; # network configuration
s: model.descriptor_input = desc-input;	 # Descriptor input

#--------------------------------------------------------------------------------------
# Parameters for patch extraction

# automatically determined
f: patch.fMaxScale = np.max(self.model.fScaleList); # asserts make sure this is stored properly
f: patch.fRatioScale = (self.model.nPatchSizeKp / 2.0) / 2.0;	# to not resize when scale is 2
d: patch.nPatchSize = np.round(self.model.nDescInputSize * self.patch.fRatioScale / 6.0); # the large patch size for data. the desc will look at ratio scale of 6.0

#--------------------------------------------------------------------------------------
# Validation and test time parameters
d: validation.batch_size = 100;		# batch size of the implementation

# d: validation.nScaleInterval = 4;
# d: validation.nNMSInterval = 2;	  # number of intervals we look for
# 				  # NMS (3 would mean it goes up one
# 				  # octave in case of
# 				  # nScaleInterval=2)
#---------------------------------------------------------------------------------
